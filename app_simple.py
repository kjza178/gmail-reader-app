#!/usr/bin/env python3
"""
Gmail Reader App - ·ª®ng d·ª•ng Flask ƒë∆°n gi·∫£n ƒë·ªÉ ƒë·ªçc mail IMAP
T∆∞∆°ng t·ª± nh∆∞ file index.html hi·ªán c√≥
"""

import os
import json
import time
import pyotp
import imaplib
import email
import re
import sys
import traceback
from email.header import decode_header
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from flask import Flask, render_template, request, jsonify, session, redirect, url_for
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.secret_key = 'gmail_reader_simple_2024'

# Error handling
@app.errorhandler(500)
def internal_error(error):
    logger.error(f"Internal server error: {error}")
    return "Internal server error", 500

@app.errorhandler(404)
def not_found_error(error):
    logger.error(f"Page not found: {error}")
    return "Page not found", 404

class GmailReader:
    def __init__(self):
        self.backup_file = "2fa_backup.json"  # ƒê·ªçc t·ª´ th∆∞ m·ª•c hi·ªán t·∫°i
        self.logs = []
        
    def add_log(self, message):
        """Th√™m log message"""
        timestamp = time.strftime('%H:%M:%S')
        self.logs.append(f"[{timestamp}] {message}")
        if len(self.logs) > 50:  # Gi·ªØ t·ªëi ƒëa 50 logs
            self.logs.pop(0)
        logger.info(message)
        
    def load_2fa_data(self):
        """Load 2FA data t·ª´ file backup"""
        try:
            if os.path.exists(self.backup_file):
                with open(self.backup_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            return {}
        except Exception as e:
            self.add_log(f"‚ùå L·ªói load 2FA data: {e}")
            return {}
    
    def get_app_password(self, email_address):
        """L·∫•y App Password cho email"""
        try:
            backup_data = self.load_2fa_data()
            if email_address in backup_data and 'app_passwords' in backup_data[email_address]:
                app_passwords = backup_data[email_address]['app_passwords']
                if 'Mail' in app_passwords:
                    return app_passwords['Mail']['password']
            return None
        except Exception as e:
            self.add_log(f"‚ùå L·ªói l·∫•y app password: {e}")
            return None
    
    def get_2fa_key(self, email_address):
        """L·∫•y 2FA key cho email"""
        try:
            backup_data = self.load_2fa_data()
            if email_address in backup_data and 'setup_key' in backup_data[email_address]:
                return backup_data[email_address]['setup_key']
            return None
        except Exception as e:
            self.add_log(f"‚ùå L·ªói l·∫•y 2FA key: {e}")
            return None
    
    def generate_totp(self, setup_key):
        """T·∫°o TOTP code"""
        try:
            totp = pyotp.TOTP(setup_key)
            return totp.now()
        except Exception as e:
            self.add_log(f"‚ùå L·ªói t·∫°o TOTP: {e}")
            return None
    
    def extract_email_content(self, email_message):
        """Tr√≠ch xu·∫•t n·ªôi dung email"""
        content = ""
        
        # Th·ª≠ l·∫•y text content
        if email_message.is_multipart():
            for part in email_message.walk():
                if part.get_content_type() == "text/plain":
                    try:
                        content = part.get_payload(decode=True).decode()
                        break
                    except:
                        continue
        else:
            try:
                content = email_message.get_payload(decode=True).decode()
            except:
                content = str(email_message.get_payload())
        
        return content
    
    def extract_otp_from_content(self, content):
        """Tr√≠ch xu·∫•t OTP t·ª´ n·ªôi dung email"""
        if not content:
            return None
            
        # T√¨m c√°c pattern OTP ph·ªï bi·∫øn - C·∫¢I THI·ªÜN
        patterns = [
            # OTP patterns ch√≠nh x√°c h∆°n
            r'\b(\d{6})\b',  # 6 s·ªë li√™n ti·∫øp
            r'\b(\d{4})\b',  # 4 s·ªë li√™n ti·∫øp  
            r'\b(\d{8})\b',  # 8 s·ªë li√™n ti·∫øp
            r'verification code[:\s]*(\d{4,8})',
            r'OTP[:\s]*(\d{4,8})',
            r'code[:\s]*(\d{4,8})',
            r'(\d{4,8})',  # B·∫•t k·ª≥ 4-8 s·ªë n√†o
        ]
        
        # Lo·∫°i b·ªè c√°c s·ªë kh√¥ng ph·∫£i OTP (nh∆∞ nƒÉm, ng√†y th√°ng)
        exclude_patterns = [
            r'\b(19|20)\d{2}\b',  # NƒÉm 19xx, 20xx
            r'\b\d{1,2}[/-]\d{1,2}[/-]\d{2,4}\b',  # Ng√†y th√°ng
            r'\b\d{1,2}:\d{2}\b',  # Gi·ªù ph√∫t
        ]
        
        # Ki·ªÉm tra v√† lo·∫°i b·ªè c√°c pattern kh√¥ng ph·∫£i OTP
        for exclude_pattern in exclude_patterns:
            content = re.sub(exclude_pattern, '', content)
        
        # T√¨m OTP
        for pattern in patterns:
            matches = re.findall(pattern, content, re.IGNORECASE)
            if matches:
                # L·ªçc k·∫øt qu·∫£ - ch·ªâ l·∫•y nh·ªØng s·ªë c√≥ v·∫ª h·ª£p l√Ω
                for match in matches:
                    otp = str(match)
                    # Ki·ªÉm tra xem c√≥ ph·∫£i OTP h·ª£p l·ªá kh√¥ng
                    if len(otp) >= 4 and len(otp) <= 8:
                        # Lo·∫°i b·ªè c√°c s·ªë qu√° d·ªÖ ƒëo√°n
                        if not (otp.startswith('0000') or otp.startswith('1111') or 
                               otp.startswith('1234') or otp.startswith('9999')):
                            return otp
        
        return None
    
    def clear_logs(self):
        """Clear t·∫•t c·∫£ logs"""
        self.logs.clear()
        self.add_log("üßπ ƒê√£ clear logs")
    
    def read_emails_imap(self, email_address, password, max_emails=10, unread_only=False, clear_logs=True):
        """ƒê·ªçc emails qua IMAP"""
        try:
            # Clear logs n·∫øu c·∫ßn
            if clear_logs:
                self.clear_logs()
            
            self.add_log(f"üìß B·∫Øt ƒë·∫ßu ƒë·ªçc emails cho: {email_address}")
            if unread_only:
                self.add_log("üì¨ Ch·ªâ l·∫•y emails ch∆∞a ƒë·ªçc")
            
            # L·∫•y 2FA key v√† t·∫°o TOTP
            setup_key = self.get_2fa_key(email_address)
            totp_code = None
            if setup_key:
                totp_code = self.generate_totp(setup_key)
                self.add_log(f"üî¢ Generated TOTP: {totp_code}")
            
            # T·∫°o app password n·∫øu c·∫ßn
            app_password = self.get_app_password(email_address)
            if app_password:
                password = app_password
                self.add_log(f"üîë S·ª≠ d·ª•ng App Password cho {email_address}")
            
            # K·∫øt n·ªëi IMAP
            imap_server = "imap.gmail.com"
            imap_port = 993
            
            # T·∫°o connection
            imap_connection = imaplib.IMAP4_SSL(imap_server, imap_port)
            
            # Login
            if app_password:
                imap_connection.login(email_address, password)
                self.add_log(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi App Password: {email_address}")
            else:
                # Th·ª≠ login v·ªõi password g·ªëc + TOTP
                if totp_code:
                    combined_password = password + totp_code
                    imap_connection.login(email_address, combined_password)
                    self.add_log(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi TOTP: {email_address}")
                else:
                    imap_connection.login(email_address, password)
                    self.add_log(f"‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng: {email_address}")
            
            try:
                # Ch·ªçn mailbox INBOX
                imap_connection.select('INBOX')
                
                # T√¨m emails - CH·ªà L·∫§Y UNREAD N·∫æU C·∫¶N
                if unread_only:
                    status, messages = imap_connection.search(None, 'UNSEEN')
                    self.add_log("üì¨ T√¨m emails ch∆∞a ƒë·ªçc...")
                else:
                    status, messages = imap_connection.search(None, 'ALL')
                    self.add_log("üì¨ T√¨m t·∫•t c·∫£ emails...")
                
                if status != 'OK':
                    self.add_log("‚ùå Kh√¥ng th·ªÉ t√¨m emails")
                    return
                
                # L·∫•y danh s√°ch email IDs
                email_ids = messages[0].split()
                if not email_ids:
                    if unread_only:
                        self.add_log("üì≠ Kh√¥ng c√≥ emails ch∆∞a ƒë·ªçc")
                    else:
                        self.add_log("üì≠ Kh√¥ng c√≥ emails n√†o")
                    return
                
                # L·∫•y emails m·ªõi nh·∫•t
                latest_emails = email_ids[-max_emails:] if len(email_ids) > max_emails else email_ids
                latest_emails.reverse()  # M·ªõi nh·∫•t tr∆∞·ªõc
                
                self.add_log(f"üì¨ T√¨m th·∫•y {len(latest_emails)} emails")
                
                for i, email_id in enumerate(latest_emails, 1):
                    try:
                        # Fetch email
                        status, msg_data = imap_connection.fetch(email_id, '(RFC822)')
                        if status != 'OK':
                            continue
                        
                        # Parse email
                        raw_email = msg_data[0][1]
                        email_message = email.message_from_bytes(raw_email)
                        
                        # Extract th√¥ng tin c∆° b·∫£n
                        subject = decode_header(email_message["subject"])[0][0]
                        if isinstance(subject, bytes):
                            subject = subject.decode()
                        
                        from_addr = decode_header(email_message["from"])[0][0]
                        if isinstance(from_addr, bytes):
                            from_addr = from_addr.decode()
                        
                        date = email_message["date"]
                        
                        # Extract n·ªôi dung email
                        content = self.extract_email_content(email_message)
                        
                        # T√¨m OTP trong n·ªôi dung
                        otp_code = self.extract_otp_from_content(content)
                        
                        # Hi·ªÉn th·ªã email v·ªõi ph√¢n c√°ch r√µ r√†ng
                        self.add_log("=" * 60)  # Ph√¢n c√°ch
                        self.add_log(f"üìß EMAIL {i}: {subject}")
                        self.add_log(f"üë§ From: {from_addr}")
                        self.add_log(f"üìÖ Date: {date}")
                        
                        # N·∫øu c√≥ OTP, highlight
                        if otp_code:
                            self.add_log(f"üî¢ OTP FOUND: {otp_code}")
                        
                        # Log n·ªôi dung n·∫øu l√† email quan tr·ªçng
                        if any(keyword in subject.lower() for keyword in ['otp', 'verification', 'code', 'security', 'google']):
                            # C·∫Øt n·ªôi dung ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
                            preview = content[:300].replace('\n', ' ').strip()
                            if len(content) > 300:
                                preview += "..."
                            self.add_log(f"üìù Content: {preview}")
                        
                        self.add_log("=" * 60)  # Ph√¢n c√°ch
                        
                    except Exception as e:
                        self.add_log(f"‚ö†Ô∏è L·ªói parse email {email_id}: {e}")
                        continue
                
                self.add_log(f"‚úÖ Ho√†n th√†nh ƒë·ªçc {len(latest_emails)} emails")
                
            finally:
                imap_connection.logout()
                
        except Exception as e:
            self.add_log(f"‚ùå L·ªói ƒë·ªçc emails: {e}")

# Kh·ªüi t·∫°o GmailReader
gmail_reader = GmailReader()

def load_accounts():
    """Load danh s√°ch accounts t·ª´ file"""
    try:
        accounts = []
        accounts_file = "../accounts.txt"
        if os.path.exists(accounts_file):
            with open(accounts_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            for line in lines:
                line = line.strip()
                if line and '|' in line:
                    parts = line.split('|', 1)
                    if len(parts) == 2:
                        email, password = parts
                        accounts.append([email.strip(), password.strip()])
        
        return accounts
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói load accounts: {e}")
        return []

@app.route("/", methods=["GET", "POST"])
def index():
    """Trang ch·ªß"""
    if request.method == "POST" and "action" in request.form:
        if request.form["action"] == "upload":
            # X·ª≠ l√Ω upload file
            if "file" in request.files:
                file = request.files["file"]
                if file.filename:
                    gmail_reader.add_log(f"üìÅ Upload file: {file.filename}")
                    
                    try:
                        # ƒê·ªçc n·ªôi dung file
                        content = file.read().decode('utf-8')
                        lines = content.strip().split('\n')
                        
                        # Parse accounts t·ª´ file
                        accounts = []
                        for line in lines:
                            line = line.strip()
                            if line and '|' in line:
                                parts = line.split('|', 1)
                                if len(parts) == 2:
                                    email, password = parts
                                    accounts.append((email.strip(), password.strip()))
                        
                        if accounts:
                            # L∆∞u v√†o file accounts.txt
                            accounts_file = "../accounts.txt"
                            with open(accounts_file, 'w', encoding='utf-8') as f:
                                for email, password in accounts:
                                    f.write(f"{email}|{password}\n")
                            
                            gmail_reader.add_log(f"‚úÖ ƒê√£ upload {len(accounts)} accounts t·ª´ file {file.filename}")
                            gmail_reader.add_log(f"üìÅ ƒê√£ l∆∞u v√†o: {accounts_file}")
                        else:
                            gmail_reader.add_log("‚ùå Kh√¥ng t√¨m th·∫•y accounts h·ª£p l·ªá trong file")
                            
                    except Exception as e:
                        gmail_reader.add_log(f"‚ùå L·ªói x·ª≠ l√Ω file: {e}")
                else:
                    gmail_reader.add_log("‚ùå Kh√¥ng c√≥ file ƒë∆∞·ª£c ch·ªçn")
    
    accounts = load_accounts()
    return render_template('index.html', accounts=accounts)

@app.route("/login", methods=["POST"])
def login():
    """Login v·ªõi account"""
    try:
        account_idx = int(request.form.get("account", 0))
        accounts = load_accounts()
        
        if 0 <= account_idx < len(accounts):
            email, password = accounts[account_idx]
            gmail_reader.add_log(f"üîê Login v·ªõi account: {email}")
            
            # ƒê·ªçc emails (t·∫•t c·∫£) - clear logs
            gmail_reader.read_emails_imap(email, password, max_emails=5, unread_only=False, clear_logs=True)
            
            return jsonify({"status": "success"})
        else:
            gmail_reader.add_log("‚ùå Account index kh√¥ng h·ª£p l·ªá")
            return jsonify({"status": "error", "message": "Invalid account index"})
            
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói login: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/refresh-unread", methods=["POST"])
def refresh_unread_emails():
    """Refresh unread emails cho account ƒë∆∞·ª£c ch·ªçn"""
    try:
        account_idx = int(request.form.get("account", 0))
        accounts = load_accounts()
        
        if 0 <= account_idx < len(accounts):
            email, password = accounts[account_idx]
            gmail_reader.add_log(f"üìß Refresh unread emails cho: {email}")
            
            # ƒê·ªçc emails ch∆∞a ƒë·ªçc cho account n√†y - clear logs
            gmail_reader.read_emails_imap(email, password, max_emails=5, unread_only=True, clear_logs=True)
            
            return jsonify({"status": "success"})
        else:
            gmail_reader.add_log("‚ùå Account index kh√¥ng h·ª£p l·ªá")
            return jsonify({"status": "error", "message": "Invalid account index"})
            
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói refresh unread: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/refresh-balanced", methods=["POST"])
def refresh_emails_balanced():
    """Refresh emails cho t·∫•t c·∫£ accounts - CH·ªà L·∫§Y UNREAD"""
    try:
        accounts = load_accounts()
        gmail_reader.add_log(f"üîÑ Refresh emails ch∆∞a ƒë·ªçc cho {len(accounts)} accounts")
        
        for i, (email, password) in enumerate(accounts):
            gmail_reader.add_log(f"üìß ƒêang x·ª≠ l√Ω account {i+1}: {email}")
            # Kh√¥ng clear logs khi refresh t·∫•t c·∫£ accounts
            gmail_reader.read_emails_imap(email, password, max_emails=5, unread_only=True, clear_logs=False)
            time.sleep(1)  # Delay gi·ªØa c√°c accounts
        
        gmail_reader.add_log("‚úÖ Ho√†n th√†nh refresh t·∫•t c·∫£ accounts")
        return jsonify({"status": "success"})
        
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói refresh: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/logout", methods=["POST"])
def logout():
    """Logout"""
    gmail_reader.add_log("üëã Logout")
    return jsonify({"status": "success"})

@app.route("/log")
def get_log():
    """L·∫•y logs"""
    return jsonify({"logs": gmail_reader.logs})

@app.route("/setup-2fa", methods=["POST"])
def setup_single_2fa():
    """Setup 2FA cho account ƒë∆∞·ª£c ch·ªçn - DISABLED ON SERVER"""
    try:
        account_idx = int(request.form.get("account", 0))
        accounts = load_accounts()
        
        if 0 <= account_idx < len(accounts):
            email, password = accounts[account_idx]
            gmail_reader.add_log(f"üîê Setup 2FA cho: {email}")
            gmail_reader.add_log("‚ö†Ô∏è Browser automation b·ªã disable tr√™n server")
            gmail_reader.add_log("üí° Vui l√≤ng ch·∫°y setup 2FA tr√™n local machine")
            
            return jsonify({"status": "error", "message": "Browser automation not available on server"})
        else:
            gmail_reader.add_log("‚ùå Account index kh√¥ng h·ª£p l·ªá")
            return jsonify({"status": "error", "message": "Invalid account index"})
            
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói setup 2FA: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/setup-all-2fa", methods=["POST"])
def setup_all_2fa():
    """Setup 2FA cho t·∫•t c·∫£ accounts - DISABLED ON SERVER"""
    try:
        accounts = load_accounts()
        gmail_reader.add_log(f"üîê Setup 2FA cho {len(accounts)} accounts")
        gmail_reader.add_log("‚ö†Ô∏è Browser automation b·ªã disable tr√™n server")
        gmail_reader.add_log("üí° Vui l√≤ng ch·∫°y setup 2FA tr√™n local machine")
        
        return jsonify({"status": "error", "message": "Browser automation not available on server"})
        
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói setup all 2FA: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/check-2fa-status", methods=["POST"])
def check_2fa_status():
    """Ki·ªÉm tra tr·∫°ng th√°i 2FA c·ªßa t·∫•t c·∫£ accounts"""
    try:
        accounts = load_accounts()
        backup_data = gmail_reader.load_2fa_data()
        
        gmail_reader.add_log("üìä Ki·ªÉm tra tr·∫°ng th√°i 2FA...")
        
        for i, (email, password) in enumerate(accounts):
            if email in backup_data:
                account_data = backup_data[email]
                if 'setup_key' in account_data and 'app_passwords' in account_data:
                    gmail_reader.add_log(f"‚úÖ {email}: ƒê√£ setup 2FA + App Password")
                elif 'setup_key' in account_data:
                    gmail_reader.add_log(f"‚ö†Ô∏è {email}: C√≥ 2FA nh∆∞ng ch∆∞a c√≥ App Password")
                else:
                    gmail_reader.add_log(f"‚ùå {email}: Ch∆∞a setup 2FA")
            else:
                gmail_reader.add_log(f"‚ùå {email}: Ch∆∞a setup 2FA")
        
        gmail_reader.add_log("üìä Ho√†n th√†nh ki·ªÉm tra tr·∫°ng th√°i")
        return jsonify({"status": "success"})
        
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói check 2FA status: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/get-2fa-status")
def get_2fa_status():
    """L·∫•y tr·∫°ng th√°i 2FA cho t·∫•t c·∫£ accounts ƒë·ªÉ c·∫≠p nh·∫≠t UI"""
    try:
        accounts = load_accounts()
        backup_data = gmail_reader.load_2fa_data()
        
        status_data = {}
        for i, (email, password) in enumerate(accounts):
            if email in backup_data:
                account_data = backup_data[email]
                if 'setup_key' in account_data and 'app_passwords' in account_data:
                    status_data[i] = {
                        'status': 'success',
                        'text': '‚úÖ ƒê√£ setup',
                        'class': 'status-2fa'
                    }
                elif 'setup_key' in account_data:
                    status_data[i] = {
                        'status': 'warning',
                        'text': '‚ö†Ô∏è Ch∆∞a c√≥ App Password',
                        'class': 'status-warning'
                    }
                else:
                    status_data[i] = {
                        'status': 'none',
                        'text': '‚ùå Ch∆∞a setup',
                        'class': 'status-none'
                    }
            else:
                status_data[i] = {
                    'status': 'none',
                    'text': '‚ùå Ch∆∞a setup',
                    'class': 'status-none'
                }
        
        return jsonify({"status_data": status_data})
        
    except Exception as e:
        return jsonify({"error": str(e)})

@app.route("/setup-multi-2fa", methods=["POST"])
def setup_multi_2fa():
    """Setup 2FA cho t·∫•t c·∫£ accounts v·ªõi multi-thread - DISABLED ON SERVER"""
    try:
        gmail_reader.add_log("üöÄ Setup 2FA multi-thread")
        gmail_reader.add_log("‚ö†Ô∏è Browser automation b·ªã disable tr√™n server")
        gmail_reader.add_log("üí° Vui l√≤ng ch·∫°y setup 2FA tr√™n local machine")
        
        return jsonify({"status": "error", "message": "Browser automation not available on server"})
        
    except Exception as e:
        gmail_reader.add_log(f"‚ùå L·ªói setup multi-thread: {e}")
        return jsonify({"status": "error", "message": str(e)})

@app.route("/check-multi-status")
def check_multi_status():
    """Ki·ªÉm tra tr·∫°ng th√°i setup multi-thread"""
    try:
        # ƒê·ªçc log file
        log_file = "multi_setup_2fa.log"
        if os.path.exists(log_file):
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                # L·∫•y 20 d√≤ng cu·ªëi
                recent_lines = lines[-20:] if len(lines) > 20 else lines
                return jsonify({
                    "status": "success",
                    "log": recent_lines
                })
        else:
            return jsonify({
                "status": "success", 
                "log": ["Ch∆∞a c√≥ log file"]
            })
    except Exception as e:
        return jsonify({"status": "error", "message": str(e)})

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False) 